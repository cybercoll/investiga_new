name: Vercel Production Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      vercel_token:
        description: 'Vercel token for one-off run'
        required: false
        type: string

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    permissions:
      contents: read
      actions: write
      checks: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build (Next.js local)
        id: build_local
        run: |
          START=$(date +%s)
          npm run build
          END=$(date +%s)
          MS=$(( (END-START)*1000 ))
          echo "build_ms=$MS" >> $GITHUB_OUTPUT

      - name: Wait for Vercel production (GitHub checks)
        id: fetch_production
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.sha;
            const start = Date.now();
            const maxAttempts = 30;
            const delayMs = 10000;
            let url = '', inspect = '', attempt = 0;
            function extract(text) {
              const links = (text && text.match(/https?:\/\/[^\s)]+/g)) || [];
              const preferred = links.find(u => u.includes('.vercel.app')) || links[links.length - 1] || '';
              const inspectMatch = links.find(u => u.includes('vercel.com')) || '';
              return { foundUrl: preferred, foundInspect: inspectMatch };
            }
            while (attempt < maxAttempts) {
              attempt++;
              const { data } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha,
                per_page: 100,
              });
              const vercelChecks = data.check_runs.filter(cr => {
                const n = (cr.name || '').toLowerCase();
                const d = (cr.details_url || '').toLowerCase();
                return n.includes('vercel') || d.includes('vercel.com');
              });
              for (const cr of vercelChecks) {
                if (cr.status === 'completed' && cr.conclusion === 'success') {
                  const blob = [cr.details_url || '', (cr.output && cr.output.summary) || '', (cr.output && cr.output.text) || ''].filter(Boolean).join('\n');
                  const { foundUrl, foundInspect } = extract(blob);
                  if (foundUrl) { url = foundUrl; inspect = foundInspect || (cr.details_url || ''); break; }
                }
              }
              if (url) break;
              await new Promise(r => setTimeout(r, delayMs));
            }
            const deployMs = Date.now() - start;
            core.setOutput('production_url', url || '');
            core.setOutput('inspect_url', inspect || '');
            core.setOutput('deploy_ms', String(deployMs));

      - name: Collect production metrics
        id: collect_metrics
        run: |
          SIZE_BYTES=$(du -sb .next | cut -f1)
          SIZE_MB=$(awk "BEGIN { printf \"%.2f\", $SIZE_BYTES/1024/1024 }")
          echo "bundle_size_bytes=$SIZE_BYTES" >> $GITHUB_OUTPUT
          echo "bundle_size_mb=$SIZE_MB" >> $GITHUB_OUTPUT

          URL="${{ steps.fetch_production.outputs.production_url }}"
          ROOT_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$URL/")
          ROOT_MS=$(awk "BEGIN { printf \"%.0f\", $ROOT_TIME*1000 }")
          ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/")
          echo "resp_root_ms=$ROOT_MS" >> $GITHUB_OUTPUT
          echo "resp_root_status=$ROOT_STATUS" >> $GITHUB_OUTPUT

      - name: Summary
        if: always()
        run: |
          {
            echo "### Production";
            echo "URL: ${{ steps.fetch_production.outputs.production_url }}";
            echo "Inspect: ${{ steps.fetch_production.outputs.inspect_url }}";
            echo "";
            echo "Build: ${{ steps.build_local.outputs.build_ms }} ms";
            echo "Deploy: ${{ steps.fetch_production.outputs.deploy_ms }} ms";
            echo "Bundle: ${{ steps.collect_metrics.outputs.bundle_size_mb }} MB";
            echo "";
            echo "Node: $(node -v)";
            echo "Badge: ![Production](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/vercel-production.yml?branch=${{ github.ref_name }})";
            echo "";
            echo "Root: ${{ steps.collect_metrics.outputs.resp_root_ms }} ms (HTTP ${{ steps.collect_metrics.outputs.resp_root_status }})";
          } >> $GITHUB_STEP_SUMMARY