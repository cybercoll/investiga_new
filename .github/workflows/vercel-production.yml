name: Vercel Production Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      vercel_token:
        description: 'Vercel token for one-off run'
        required: false
        type: string

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    permissions:
      contents: read
      actions: write
      checks: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build (Next.js local)
        id: build_local
        run: |
          START=$(date +%s)
          npm run build
          END=$(date +%s)
          MS=$(( (END-START)*1000 ))
          echo "build_ms=$MS" >> $GITHUB_OUTPUT

      - name: Deploy to Vercel (CLI, production)
        id: vercel_cli
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_TOKEN_INPUT: ${{ inputs.vercel_token }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          TOKEN="${VERCEL_TOKEN:-${VERCEL_TOKEN_INPUT:-nb8Zy8ZPJorzEG8BP61UJIPO}}"
          ORG="${VERCEL_ORG_ID:-team_cBXVEFj6YK3OLTTd5JLX8eTw}"
          PROJECT="${VERCEL_PROJECT_ID:-prj_Q2iJe0AiXgNm26Z0dmwzP174HohF}"
          if [ -z "$TOKEN" ]; then
            echo "No Vercel token provided; skipping CLI deploy."
            echo "cli_url=" >> $GITHUB_OUTPUT
            exit 0
          fi
          npx vercel --version || npm i -g vercel
          OUT=$(npx vercel deploy --prod --yes --token "$TOKEN" --project "$PROJECT" --scope "$ORG")
          echo "$OUT"
          URL=$(echo "$OUT" | grep -Eo 'https?://[a-zA-Z0-9.-]+\\.vercel\\.app' | tail -n1)
          echo "cli_url=$URL" >> $GITHUB_OUTPUT

      - name: Wait for Vercel production (GitHub checks)
        id: fetch_production
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.sha;
            const start = Date.now();
            const maxAttempts = 30;
            const delayMs = 10000;
            let url = '', inspect = '', attempt = 0;
            function extract(text) {
              const links = (text && text.match(/https?:\/\/[^\s)]+/g)) || [];
              const preferred = links.find(u => u.includes('.vercel.app')) || links[links.length - 1] || '';
              const inspectMatch = links.find(u => u.includes('vercel.com')) || '';
              return { foundUrl: preferred, foundInspect: inspectMatch };
            }
            while (attempt < maxAttempts) {
              attempt++;
              const { data } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha,
                per_page: 100,
              });
              const vercelChecks = data.check_runs.filter(cr => {
                const n = (cr.name || '').toLowerCase();
                const d = (cr.details_url || '').toLowerCase();
                return n.includes('vercel') || d.includes('vercel.com');
              });
              for (const cr of vercelChecks) {
                if (cr.status === 'completed' && cr.conclusion === 'success') {
                  const blob = [cr.details_url || '', (cr.output && cr.output.summary) || '', (cr.output && cr.output.text) || ''].filter(Boolean).join('\n');
                  const { foundUrl, foundInspect } = extract(blob);
                  if (foundUrl) { url = foundUrl; inspect = foundInspect || (cr.details_url || ''); break; }
                }
              }
              if (url) break;
              await new Promise(r => setTimeout(r, delayMs));
            }
            const deployMs = Date.now() - start;
            core.setOutput('production_url', url || '');
            core.setOutput('inspect_url', inspect || '');
            core.setOutput('deploy_ms', String(deployMs));

      - name: Resolve production URL
        id: resolve_prod_url
        run: |
          URL_CLI="${{ steps.vercel_cli.outputs.cli_url }}"
          URL_CHECKS="${{ steps.fetch_production.outputs.production_url }}"
          URL=""
          if [ -n "$URL_CLI" ]; then URL="$URL_CLI"; else URL="$URL_CHECKS"; fi
          echo "production_url=$URL" >> $GITHUB_OUTPUT
          echo "inspect_url=${{ steps.fetch_production.outputs.inspect_url }}" >> $GITHUB_OUTPUT
          echo "deploy_ms=${{ steps.fetch_production.outputs.deploy_ms }}" >> $GITHUB_OUTPUT

      - name: Collect production metrics
        id: collect_metrics
        run: |
          SIZE_BYTES=$(du -sb .next | cut -f1)
          SIZE_MB=$(awk "BEGIN { printf \"%.2f\", $SIZE_BYTES/1024/1024 }")
          echo "bundle_size_bytes=$SIZE_BYTES" >> $GITHUB_OUTPUT
          echo "bundle_size_mb=$SIZE_MB" >> $GITHUB_OUTPUT

          URL="${{ steps.resolve_prod_url.outputs.production_url }}"

          # Root
          ROOT_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$URL/")
          ROOT_MS=$(awk "BEGIN { printf \"%.0f\", $ROOT_TIME*1000 }")
          ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/")
          echo "resp_root_ms=$ROOT_MS" >> $GITHUB_OUTPUT
          echo "resp_root_status=$ROOT_STATUS" >> $GITHUB_OUTPUT

          # History
          HISTORY_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$URL/api/history")
          HISTORY_MS=$(awk "BEGIN { printf \"%.0f\", $HISTORY_TIME*1000 }")
          HISTORY_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/api/history")
          echo "resp_history_ms=$HISTORY_MS" >> $GITHUB_OUTPUT
          echo "resp_history_status=$HISTORY_STATUS" >> $GITHUB_OUTPUT

          # Search real providers + directdata
          SEARCH_PAYLOAD='{"query":"Brasil","providers":["wikipedia","duckduckgo","github","directdata"]}'
          SEARCH_TIME=$(curl -s -o /dev/null -w "%{time_total}" -X POST -H "Content-Type: application/json" -d "$SEARCH_PAYLOAD" "$URL/api/search")
          SEARCH_MS=$(awk "BEGIN { printf \"%.0f\", $SEARCH_TIME*1000 }")
          SEARCH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$SEARCH_PAYLOAD" "$URL/api/search")
          echo "resp_search_ms=$SEARCH_MS" >> $GITHUB_OUTPUT
          echo "resp_search_status=$SEARCH_STATUS" >> $GITHUB_OUTPUT

          # Search CEP
          CEP_PAYLOAD='{"query":"01001000","providers":["cep"]}'
          CEP_TIME=$(curl -s -o /dev/null -w "%{time_total}" -X POST -H "Content-Type: application/json" -d "$CEP_PAYLOAD" "$URL/api/search")
          CEP_MS=$(awk "BEGIN { printf \"%.0f\", $CEP_TIME*1000 }")
          CEP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$CEP_PAYLOAD" "$URL/api/search")
          echo "resp_cep_ms=$CEP_MS" >> $GITHUB_OUTPUT
          echo "resp_cep_status=$CEP_STATUS" >> $GITHUB_OUTPUT

          # Search CPF
          CPF_PAYLOAD='{"query":"52998224725","providers":["cpf"]}'
          CPF_TIME=$(curl -s -o /dev/null -w "%{time_total}" -X POST -H "Content-Type: application/json" -d "$CPF_PAYLOAD" "$URL/api/search")
          CPF_MS=$(awk "BEGIN { printf \"%.0f\", $CPF_TIME*1000 }")
          CPF_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$CPF_PAYLOAD" "$URL/api/search")
          echo "resp_cpf_ms=$CPF_MS" >> $GITHUB_OUTPUT
          echo "resp_cpf_status=$CPF_STATUS" >> $GITHUB_OUTPUT

      - name: Summary
        if: always()
        run: |
          {
            echo "### Production";
            echo "URL: ${{ steps.resolve_prod_url.outputs.production_url }}";
            echo "Inspect: ${{ steps.fetch_production.outputs.inspect_url }}";
            echo "";
            echo "Build: ${{ steps.build_local.outputs.build_ms }} ms";
            echo "Deploy: ${{ steps.fetch_production.outputs.deploy_ms }} ms";
            echo "Bundle: ${{ steps.collect_metrics.outputs.bundle_size_mb }} MB";
            echo "";
            echo "Node: $(node -v)";
            echo "Badge: ![Production](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/vercel-production.yml?branch=${{ github.ref_name }})";
            echo "";
            echo "Root: ${{ steps.collect_metrics.outputs.resp_root_ms }} ms (HTTP ${{ steps.collect_metrics.outputs.resp_root_status }})";
            echo "History: ${{ steps.collect_metrics.outputs.resp_history_ms }} ms (HTTP ${{ steps.collect_metrics.outputs.resp_history_status }})";
            echo "Search: ${{ steps.collect_metrics.outputs.resp_search_ms }} ms (HTTP ${{ steps.collect_metrics.outputs.resp_search_status }})";
            echo "CEP: ${{ steps.collect_metrics.outputs.resp_cep_ms }} ms (HTTP ${{ steps.collect_metrics.outputs.resp_cep_status }})";
            echo "CPF: ${{ steps.collect_metrics.outputs.resp_cpf_ms }} ms (HTTP ${{ steps.collect_metrics.outputs.resp_cpf_status }})";
            echo "";
            echo "Badges:";
            echo "$(
              PROD_URL='${{ steps.fetch_production.outputs.production_url }}';
              BUILD_MS='${{ steps.build_local.outputs.build_ms }}';
              DEPLOY_MS='${{ steps.fetch_production.outputs.deploy_ms }}';
              BUNDLE_BYTES='${{ steps.collect_metrics.outputs.bundle_size_bytes }}';
              BUNDLE_MB='${{ steps.collect_metrics.outputs.bundle_size_mb }}';
              ROOT_MS='${{ steps.collect_metrics.outputs.resp_root_ms }}';
              HISTORY_MS='${{ steps.collect_metrics.outputs.resp_history_ms }}';
              SEARCH_MS='${{ steps.collect_metrics.outputs.resp_search_ms }}';
              CEP_MS='${{ steps.collect_metrics.outputs.resp_cep_ms }}';
              CPF_MS='${{ steps.collect_metrics.outputs.resp_cpf_ms }}';
              color_by() { local v=$1 g=$2 y=$3 o=$4; if [ -z "$v" ]; then echo grey; elif [ "$v" -le "$g" ]; then echo brightgreen; elif [ "$v" -le "$y" ]; then echo yellow; elif [ "$v" -le "$o" ]; then echo orange; else echo red; fi; };
              COLOR_BUILD=$(color_by "$BUILD_MS" 60000 180000 480000);
              COLOR_DEPLOY=$(color_by "$DEPLOY_MS" 60000 180000 480000);
              COLOR_BUNDLE=$(color_by "$BUNDLE_BYTES" 1048576 2097152 3145728);
              COLOR_ROOT=$(color_by "$ROOT_MS" 300 800 1500);
              COLOR_HISTORY=$(color_by "$HISTORY_MS" 300 800 1500);
              COLOR_SEARCH=$(color_by "$SEARCH_MS" 300 800 1500);
              COLOR_CEP=$(color_by "$CEP_MS" 300 800 1500);
              COLOR_CPF=$(color_by "$CPF_MS" 300 800 1500);
              echo "![build](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=build&message=${BUILD_MS}ms&color=$COLOR_BUILD) \
![deploy](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=deploy&message=${DEPLOY_MS}ms&color=$COLOR_DEPLOY) \
![bundle](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=bundle&message=${BUNDLE_MB}MB&color=$COLOR_BUNDLE) \
![root](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=root&message=${ROOT_MS}ms&color=$COLOR_ROOT) \
![history](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=history&message=${HISTORY_MS}ms&color=$COLOR_HISTORY) \
![search](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=search&message=${SEARCH_MS}ms&color=$COLOR_SEARCH) \
![cep](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=cep&message=${CEP_MS}ms&color=$COLOR_CEP) \
![cpf](https://img.shields.io/endpoint?url=$PROD_URL/api/badge?label=cpf&message=${CPF_MS}ms&color=$COLOR_CPF)";
            )";
          } >> $GITHUB_STEP_SUMMARY