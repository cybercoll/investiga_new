name: integration

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  checks: write
  pull-requests: write
  contents: read
  issues: write

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Quick check
        run: |
          node -v
          npm -v
          echo "Integration job succeeded"

  build_success:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Simulate build success
        run: |
          echo "Simulating successful job"
          node -v

  custom_checks:
    needs: [integration, build_success]
    runs-on: ubuntu-latest
    steps:
      - name: Create custom check-runs (timed_out, cancelled, action_required, neutral)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = (context.payload.pull_request && context.payload.pull_request.head && context.payload.pull_request.head.sha) || context.sha;
            const now = new Date();
            const started = new Date(now.getTime() - 30 * 1000).toISOString();
            const completed = now.toISOString();

            const checksToCreate = [
              { name: 'integration-timed_out', conclusion: 'timed_out' },
              { name: 'integration-cancelled', conclusion: 'cancelled' },
              { name: 'integration-action_required', conclusion: 'action_required' },
              { name: 'integration-neutral', conclusion: 'neutral' },
              { name: 'integration-skipped', conclusion: 'skipped' },
              { name: 'integration-stale', conclusion: 'stale' },
            ];

            for (const chk of checksToCreate) {
              try {
                // Try find existing check-run by name for this ref
                const { data } = await github.rest.checks.listForRef({ owner, repo, ref: sha, per_page: 100 });
                const existing = (data.check_runs || []).find(r => r.name === chk.name);
                if (existing) {
                  await github.rest.checks.update({ owner, repo, check_run_id: existing.id, name: chk.name, status: 'completed', conclusion: chk.conclusion, completed_at: completed, details_url: `https://github.com/${owner}/${repo}/commit/${sha}/checks` });
                } else {
                  await github.rest.checks.create({ owner, repo, name: chk.name, head_sha: sha, status: 'completed', started_at: started, completed_at: completed, conclusion: chk.conclusion, details_url: `https://github.com/${owner}/${repo}/commit/${sha}/checks` });
                }
              } catch (e) {
                core.warning(`Failed to create/update check-run ${chk.name}: ${e.message}`);
              }
            }

  bundle_report:
    needs: [integration]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies (current commit)
        run: npm ci
      - name: Build previous commit and report
        id: prev
        run: |
          set -e
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            git checkout HEAD~1
            npm ci
            npm run build
            node scripts/bundle-report.js > bundle-report-prev.txt || echo "Prev bundle report failed"
            cp bundle-report.json bundle-report-prev.json || true
          else
            echo "no_prev=true" >> $GITHUB_OUTPUT
          fi
      - name: Restore current commit
        run: |
          git checkout $GITHUB_SHA
      - name: Install dependencies (current commit)
        run: npm ci
      - name: Build app (current)
        id: build_app
        run: |
          START=$(date +%s)
          npm run build
          END=$(date +%s)
          MS=$(( (END-START)*1000 ))
          echo "build_ms=$MS" >> $GITHUB_OUTPUT
      - name: Generate bundle report (current)
        run: node scripts/bundle-report.js > bundle-report.txt || echo "Bundle report generation failed"
      - name: Compare bundle reports
        run: |
          if [ -f bundle-report-prev.json ]; then
            node scripts/bundle-compare.js bundle-report-prev.json bundle-report.json || echo "Compare failed"
          else
            echo "# Bundle Report Diff\nNo previous commit available for diff." > bundle-report-diff.txt
            echo "{}" > bundle-report-diff.json
          fi
      - name: Upload bundle report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-report-integration
          path: |
            bundle-report.txt
            bundle-report.json
            bundle-report-prev.txt
            bundle-report-prev.json
            bundle-report-diff.txt
            bundle-report-diff.json

  comment:
    needs: [integration, build_success, custom_checks, bundle_report]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download bundle artifacts
        uses: actions/download-artifact@v4
        with:
          name: bundle-report-integration
          path: ./bundle_artifacts
      - name: Compose sticky PR comment with durations and links
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request?.number;
            const sha = (context.payload.pull_request && context.payload.pull_request.head && context.payload.pull_request.head.sha) || context.sha;
            const runId = process.env.GITHUB_RUN_ID;
            if (!pr || !sha) {
              core.setFailed('No PR context or SHA');
              return;
            }
            const { data: checks } = await github.rest.checks.listForRef({ owner, repo, ref: sha, per_page: 100 });
            const runs = Array.isArray(checks.check_runs) ? checks.check_runs : [];

            function msBetween(a, b) {
              if (!a || !b) return null;
              const ms = new Date(b).getTime() - new Date(a).getTime();
              return ms >= 0 ? ms : null;
            }

            const lines = runs.map(r => {
              const dur = msBetween(r.started_at, r.completed_at);
              const durStr = dur != null ? ` â€” ${dur}ms` : '';
              const link = r.html_url ? ` ([details](${r.html_url}))` : '';
              return `- ${r.name}: ${r.status}${r.conclusion ? ` (${r.conclusion})` : ''}${durStr}${link}`;
            }).join('\n');

            const order = ['failure','timed_out','cancelled','stale','action_required','neutral','skipped','success'];
            const worst = runs.reduce((acc, r) => {
              const c = (r.conclusion || 'neutral').toLowerCase();
              const a = order.indexOf(acc) >= 0 ? order.indexOf(acc) : order.length;
              const b = order.indexOf(c) >= 0 ? order.indexOf(c) : order.length;
              return b < a ? c : acc;
            }, 'success');
            const colorMap = { success: 'brightgreen', failure: 'red', cancelled: 'lightgrey', neutral: 'blue', timed_out: 'orange', action_required: 'yellow', skipped: 'lightgrey', stale: 'yellow' };
            const color = colorMap[worst] || 'lightgrey';
            const staticBadge = `![integration](https://img.shields.io/badge/integration-${worst}-${color})`;

            const checksPage = `https://github.com/${owner}/${repo}/commit/${sha}/checks`;
            const runLink = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;

            let bundleDiffExcerpt = '';
            try {
              const diffTxt = fs.readFileSync('./bundle_artifacts/bundle-report-diff.txt', 'utf8');
              const lines = diffTxt.split('\n').slice(0, 20).join('\n');
              bundleDiffExcerpt = `\nBundle report diff (excerpt):\n${lines}\n`;
            } catch (e) {
              bundleDiffExcerpt = '\nBundle report diff artifact not found.';
            }

            const body = [
              '<!-- sticky:investiga-integration -->',
              staticBadge,
              '',
              'Check-runs detalhados:',
              lines,
              '',
              `Commit: ${sha}`,
              `[Checks page](${checksPage}) | [Run artifacts](${runLink})`,
              bundleDiffExcerpt,
            ].join('\n');

            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: pr, per_page: 100 });
            const existing = comments.find(c => (c.body || '').includes('<!-- sticky:investiga-integration -->'));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
            }